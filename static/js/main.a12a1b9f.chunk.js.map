{"version":3,"sources":["Header/GuestInputForm.js","Header/index.js","MainContent/ConfirmedFilter.js","MainContent/GuestList/GuestName.js","MainContent/GuestList/Guest.js","MainContent/GuestList/PendingGuest.js","MainContent/GuestList/index.js","MainContent/Counter.js","MainContent/index.js","App.js","registerServiceWorker.js","index.js"],"names":["GuestInputForm","props","onSubmit","newGuestSubmitHandler","type","onChange","handleNameInput","value","pendingGuest","placeholder","name","Header","ConfirmedFilter","toggleFilter","checked","isFiltered","GuestName","isEditing","children","handleNameEdits","Guest","e","setName","target","isConfirmed","handleConfirmation","onClick","handeToggleEditing","handleRemove","PendingGuest","className","GuestList","guests","filter","guest","map","index","toggleConfirmation","id","toggleEditing","text","removeGuest","Counter","numberAttending","numberUnconfirmed","totalInvited","MainContent","App","state","lastGuestId","newGuestId","toggleGuestProperty","property","setState","preventDefault","getTotalInvited","length","getAttendingGuests","reduce","total","this","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a12a1b9f.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst GuestInputForm = props =>\n  <form onSubmit={props.newGuestSubmitHandler}>\n    <input\n      type=\"text\"\n      onChange={props.handleNameInput}\n      value={props.pendingGuest}\n      placeholder=\"Invite Someone\"\n    />\n    <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\n  </form>;\n\nGuestInputForm.propTypes = {\n  newGuestSubmitHandler: PropTypes.func.isRequired,\n  pendingGuest: PropTypes.string.isRequired,\n  handleNameInput: PropTypes.func.isRequired\n};\n\nexport default GuestInputForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport GuestInputForm from './GuestInputForm';\n\nconst Header = props =>\n  <header>\n    <h1>RSVP</h1>\n    <p>A Treehouse App</p>\n    <GuestInputForm\n      newGuestSubmitHandler={props.newGuestSubmitHandler}\n      pendingGuest={props.pendingGuest}\n      handleNameInput={props.handleNameInput}\n    />\n  </header>;\n\nHeader.propTypes = {\n  newGuestSubmitHandler: PropTypes.func.isRequired,\n  pendingGuest: PropTypes.string.isRequired,\n  handleNameInput: PropTypes.func.isRequired\n};\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ConfirmedFilter = props =>\n  <div>\n    <h2>Invitees</h2>\n    <label>\n      <input\n        type=\"checkbox\"\n        onChange={props.toggleFilter}\n        checked={props.isFiltered}\n      />{\" \"}\n      Hide those who haven't responded\n    </label>\n  </div>;\n\nConfirmedFilter.propTypes = {\n  toggleFilter: PropTypes.func.isRequired,\n  isFiltered: PropTypes.bool.isRequired\n};\n\nexport default ConfirmedFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GuestName = props => {\n  if (props.isEditing) {\n    return (\n      <input\n        type=\"text\"\n        value={props.children}\n        onChange={props.handleNameEdits} />\n    );\n  }\n\n  return (\n    <span>\n      {props.children}\n    </span>\n  );\n};\n\nGuestName.propTypes = {\n  isEditing: PropTypes.bool.isRequired,\n  handleNameEdits: PropTypes.func.isRequired\n};\n\nexport default GuestName;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport GuestName from './GuestName';\n\nconst Guest = props =>\n  <li>\n    <GuestName\n      isEditing={props.isEditing}\n      handleNameEdits={e => props.setName(e.target.value)}>\n      {props.name}\n    </GuestName>\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={props.isConfirmed}\n        onChange={props.handleConfirmation} /> Confirmed\n    </label>\n    <button onClick={props.handeToggleEditing}>\n      {props.isEditing ? \"save\" : \"edit\"}\n    </button>\n    <button onClick={props.handleRemove}>remove</button>\n  </li>;\n\nGuest.propTypes = {\n  name: PropTypes.string.isRequired,\n  isConfirmed: PropTypes.bool.isRequired,\n  isEditing: PropTypes.bool.isRequired,\n  handleConfirmation: PropTypes.func.isRequired,\n  handeToggleEditing: PropTypes.func.isRequired,\n  setName: PropTypes.func.isRequired,\n  handleRemove: PropTypes.func.isRequired\n};\n\nexport default Guest;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PendingGuest = props => {\n  if (props.name) {\n    return (\n      <li className=\"pending\">\n        <span>\n          {props.name}\n        </span>\n      </li>\n    );\n  }\n  return null;\n};\n\nPendingGuest.propTypes = {\n  name: PropTypes.string.isRequired\n};\n\nexport default PendingGuest;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Guest from './Guest';\nimport PendingGuest from './PendingGuest';\n\nconst GuestList = props =>\n  <ul>\n    <PendingGuest name={props.pendingGuest} />\n    {props.guests\n      .filter(guest => !props.isFiltered || guest.isConfirmed)\n      .map((guest, index) =>\n        <Guest\n          key={index}\n          name={guest.name}\n          isConfirmed={guest.isConfirmed}\n          isEditing={guest.isEditing}\n          handleConfirmation={() => props.toggleConfirmation(guest.id)}\n          handeToggleEditing={() => props.toggleEditing(guest.id)}\n          setName={text => props.setName(text, guest.id)}\n          handleRemove={() => props.removeGuest(guest.id)} />\n      )}\n  </ul>;\n\nGuestList.propTypes = {\n  guests: PropTypes.array.isRequired,\n  toggleConfirmation: PropTypes.func.isRequired,\n  toggleEditing: PropTypes.func.isRequired,\n  setName: PropTypes.func.isRequired,\n  isFiltered: PropTypes.bool.isRequired,\n  removeGuest: PropTypes.func.isRequired,\n  pendingGuest: PropTypes.string.isRequired\n};\n\nexport default GuestList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Counter = props =>\n  <table className=\"counter\">\n    <tbody>\n      <tr>\n        <td>Attending:</td>\n        <td>{props.numberAttending}</td>\n      </tr>\n      <tr>\n        <td>Unconfirmed:</td>\n        <td>{props.numberUnconfirmed}</td>\n      </tr>\n      <tr>\n        <td>Total:</td>\n        <td>{props.totalInvited}</td>\n      </tr>\n    </tbody>\n  </table>;\n\nCounter.propTypes = {\n  numberAttending: PropTypes.number,\n  numberUnconfirmed: PropTypes.number,\n  totalInvited: PropTypes.number\n};\n\nexport default Counter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport ConfirmedFilter from \"./ConfirmedFilter\";\nimport GuestList from \"./GuestList\";\nimport Counter from \"./Counter\";\n\nconst MainContent = props =>\n  <div className=\"main\">\n    <ConfirmedFilter\n      toggleFilter={props.toggleFilter}\n      isFiltered={props.isFiltered}\n    />\n    <Counter\n      totalInvited={props.totalInvited}\n      numberAttending={props.numberAttending}\n      numberUnconfirmed={props.numberUnconfirmed} />\n    <GuestList\n      guests={props.guests}\n      toggleConfirmation={props.toggleConfirmation}\n      toggleEditing={props.toggleEditing}\n      setName={props.setName}\n      isFiltered={props.isFiltered}\n      removeGuest={props.removeGuest}\n      pendingGuest={props.pendingGuest}\n    />\n  </div>;\n\nMainContent.propTypes = {\n  toggleFilter: PropTypes.func.isRequired,\n  isFiltered: PropTypes.bool.isRequired,\n  totalInvited: PropTypes.number.isRequired,\n  numberAttending: PropTypes.number.isRequired,\n  numberUnconfirmed: PropTypes.number.isRequired,\n  guests: PropTypes.array.isRequired,\n  toggleConfirmation: PropTypes.func.isRequired,\n  toggleEditing: PropTypes.func.isRequired,\n  setName: PropTypes.func.isRequired,\n  removeGuest: PropTypes.func.isRequired,\n  pendingGuest: PropTypes.string.isRequired\n};\n\nexport default MainContent;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from './Header';\nimport MainContent from './MainContent';\n\nclass App extends Component {\n\n  state = {\n    isFiltered: false,\n    pendingGuest: \"\",\n    guests: []\n  };\n\n  lastGuestId = 0;\n\n  newGuestId = () => {\n    const id = this.lastGuestId;\n    this.lastGuestId += 1;\n    return id;\n  };\n\n  toggleGuestProperty = (property, id) =>\n    this.setState({\n      guests: this.state.guests.map(guest => {\n        if (id === guest.id) {\n          return {\n            ...guest,\n            [property]: !guest[property]\n          };\n        }\n        return guest;\n      })\n    });\n\n  toggleConfirmation = id =>\n    this.toggleGuestProperty(\"isConfirmed\", id);\n\n  removeGuest = id =>\n    this.setState({\n      guests: this.state.guests.filter(guest => id !== guest.id)\n    });\n\n  toggleEditing = id =>\n    this.toggleGuestProperty(\"isEditing\", id);\n\n  setName = (name, id) =>\n    this.setState({\n      guests: this.state.guests.map(guest => {\n        if (id === guest.id) {\n          return {\n            ...guest,\n            name\n          };\n        }\n        return guest;\n      })\n    });\n\n  toggleFilter = () =>\n    this.setState({ isFiltered: !this.state.isFiltered });\n\n  handleNameInput = e =>\n    this.setState({ pendingGuest: e.target.value });\n\n  newGuestSubmitHandler = e => {\n    e.preventDefault();\n    const id = this.newGuestId();\n    this.setState({\n      guests: [\n        {\n          name: this.state.pendingGuest,\n          isConfirmed: false,\n          isEditing: false,\n          id\n        },\n        ...this.state.guests\n      ],\n      pendingGuest: ''\n    });\n  }\n\n  getTotalInvited = () => this.state.guests.length;\n\n  getAttendingGuests = () =>\n    this.state.guests.reduce(\n      (total, guest) => guest.isConfirmed ? total + 1 : total,\n      0\n    );\n\n  render() {\n    const totalInvited = this.getTotalInvited();\n    const numberAttending = this.getAttendingGuests();\n    const numberUnconfirmed = totalInvited - numberAttending;\n\n    return (\n      <div className=\"App\">\n        <Header\n          newGuestSubmitHandler={this.newGuestSubmitHandler}\n          pendingGuest={this.state.pendingGuest}\n          handleNameInput={this.handleNameInput}\n        />\n        <MainContent\n          toggleFilter={this.toggleFilter}\n          isFiltered={this.state.isFiltered}\n          totalInvited={totalInvited}\n          numberAttending={numberAttending}\n          numberUnconfirmed={numberUnconfirmed}\n          guests={this.state.guests}\n          toggleConfirmation={this.toggleConfirmation}\n          toggleEditing={this.toggleEditing}\n          setName={this.setName}\n          removeGuest={this.removeGuest}\n          pendingGuest={this.state.pendingGuest}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}